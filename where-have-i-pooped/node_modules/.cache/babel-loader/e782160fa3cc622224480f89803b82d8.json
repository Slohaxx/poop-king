{"ast":null,"code":"// src/services/mapService.ts\n\nimport { LatLng } from 'leaflet'; // Assuming Leaflet is used for map handling\n\n// Function to initialize the map\nexport const initializeMap = (mapElement, center, zoom) => {\n  const map = L.map(mapElement).setView(center, zoom);\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    maxZoom: 19\n  }).addTo(map);\n  return map;\n};\n\n// Function to add a marker to the map\nexport const addMarker = (map, position, title) => {\n  const marker = L.marker(position).addTo(map);\n  marker.bindPopup(title).openPopup();\n};\n\n// Function to set up geofencing\nexport const setupGeofence = (map, geofenceCoords) => {\n  const polygon = L.polygon(geofenceCoords).addTo(map);\n  return polygon;\n};\n\n// Function to retrieve user's current location\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        resolve(new LatLng(latitude, longitude));\n      }, error => {\n        reject(error);\n      });\n    } else {\n      reject(new Error('Geolocation is not supported by this browser.'));\n    }\n  });\n};\n\n// Function to handle location tagging\nexport const tagLocation = (location, userId) => {\n  // Logic to save the location tag to the database\n  console.log(`Location tagged for user ${userId}: ${location.lat}, ${location.lng}`);\n};\n\n// Function to fetch map data (e.g., check-ins, territories)\nexport const fetchMapData = async userId => {\n  // Placeholder for fetching data from the backend\n  const response = await fetch(`/api/mapData/${userId}`);\n  return response.json();\n};","map":{"version":3,"names":["LatLng","initializeMap","mapElement","center","zoom","map","L","setView","tileLayer","maxZoom","addTo","addMarker","position","title","marker","bindPopup","openPopup","setupGeofence","geofenceCoords","polygon","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","error","Error","tagLocation","location","userId","console","log","lat","lng","fetchMapData","response","fetch","json"],"sources":["C:/Users/lolz/Documents/poop king/poop-king/where-have-i-pooped/src/services/mapService.ts"],"sourcesContent":["// src/services/mapService.ts\n\nimport { LatLng } from 'leaflet'; // Assuming Leaflet is used for map handling\n\n// Function to initialize the map\nexport const initializeMap = (mapElement: HTMLElement, center: LatLng, zoom: number) => {\n    const map = L.map(mapElement).setView(center, zoom);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19,\n    }).addTo(map);\n    return map;\n};\n\n// Function to add a marker to the map\nexport const addMarker = (map: L.Map, position: LatLng, title: string) => {\n    const marker = L.marker(position).addTo(map);\n    marker.bindPopup(title).openPopup();\n};\n\n// Function to set up geofencing\nexport const setupGeofence = (map: L.Map, geofenceCoords: LatLng[]) => {\n    const polygon = L.polygon(geofenceCoords).addTo(map);\n    return polygon;\n};\n\n// Function to retrieve user's current location\nexport const getCurrentLocation = (): Promise<LatLng> => {\n    return new Promise((resolve, reject) => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords;\n                    resolve(new LatLng(latitude, longitude));\n                },\n                (error) => {\n                    reject(error);\n                }\n            );\n        } else {\n            reject(new Error('Geolocation is not supported by this browser.'));\n        }\n    });\n};\n\n// Function to handle location tagging\nexport const tagLocation = (location: LatLng, userId: string) => {\n    // Logic to save the location tag to the database\n    console.log(`Location tagged for user ${userId}: ${location.lat}, ${location.lng}`);\n};\n\n// Function to fetch map data (e.g., check-ins, territories)\nexport const fetchMapData = async (userId: string): Promise<any> => {\n    // Placeholder for fetching data from the backend\n    const response = await fetch(`/api/mapData/${userId}`);\n    return response.json();\n};"],"mappings":"AAAA;;AAEA,SAASA,MAAM,QAAQ,SAAS,CAAC,CAAC;;AAElC;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,UAAuB,EAAEC,MAAc,EAAEC,IAAY,KAAK;EACpF,MAAMC,GAAG,GAAGC,CAAC,CAACD,GAAG,CAACH,UAAU,CAAC,CAACK,OAAO,CAACJ,MAAM,EAAEC,IAAI,CAAC;EACnDE,CAAC,CAACE,SAAS,CAAC,oDAAoD,EAAE;IAC9DC,OAAO,EAAE;EACb,CAAC,CAAC,CAACC,KAAK,CAACL,GAAG,CAAC;EACb,OAAOA,GAAG;AACd,CAAC;;AAED;AACA,OAAO,MAAMM,SAAS,GAAGA,CAACN,GAAU,EAAEO,QAAgB,EAAEC,KAAa,KAAK;EACtE,MAAMC,MAAM,GAAGR,CAAC,CAACQ,MAAM,CAACF,QAAQ,CAAC,CAACF,KAAK,CAACL,GAAG,CAAC;EAC5CS,MAAM,CAACC,SAAS,CAACF,KAAK,CAAC,CAACG,SAAS,CAAC,CAAC;AACvC,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACZ,GAAU,EAAEa,cAAwB,KAAK;EACnE,MAAMC,OAAO,GAAGb,CAAC,CAACa,OAAO,CAACD,cAAc,CAAC,CAACR,KAAK,CAACL,GAAG,CAAC;EACpD,OAAOc,OAAO;AAClB,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAuB;EACrD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,IAAIC,SAAS,CAACC,WAAW,EAAE;MACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACnCd,QAAQ,IAAK;QACV,MAAM;UAAEe,QAAQ;UAAEC;QAAU,CAAC,GAAGhB,QAAQ,CAACiB,MAAM;QAC/CP,OAAO,CAAC,IAAItB,MAAM,CAAC2B,QAAQ,EAAEC,SAAS,CAAC,CAAC;MAC5C,CAAC,EACAE,KAAK,IAAK;QACPP,MAAM,CAACO,KAAK,CAAC;MACjB,CACJ,CAAC;IACL,CAAC,MAAM;MACHP,MAAM,CAAC,IAAIQ,KAAK,CAAC,+CAA+C,CAAC,CAAC;IACtE;EACJ,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,QAAgB,EAAEC,MAAc,KAAK;EAC7D;EACAC,OAAO,CAACC,GAAG,CAAC,4BAA4BF,MAAM,KAAKD,QAAQ,CAACI,GAAG,KAAKJ,QAAQ,CAACK,GAAG,EAAE,CAAC;AACvF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOL,MAAc,IAAmB;EAChE;EACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgBP,MAAM,EAAE,CAAC;EACtD,OAAOM,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}